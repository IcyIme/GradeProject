@page "/repl/playground/0a1"
@using GradeProject.Services
@using Radzen
@inject IJSRuntime JSRuntime
@inject DialogService DialogService

<style>
    #myEditor {
        height: 50vh; /* Set the height to 50% of the viewport height */
        width: 100%; /* Set the width to 100% */
    }
</style>

<div class="h-100 w-100">
    <StandaloneCodeEditor @ref="myEditor" Id="myEditor" ConstructionOptions="EditorConstructionOptions" OnDidChangeModelContent="HandleContentChange" />
</div>

<button @onclick="ExecuteCode">Execute Code</button>

@if (!string.IsNullOrEmpty(output))
{
    <pre>@output</pre>
    <p>@evaluationResult</p>
}

<RadzenDialog />

@code {
    private StandaloneCodeEditor myEditor;
    private async Task HandleContentChange()
    {
        code = await myEditor.GetValue();
    }

    private string code = "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(\"Hello, world!\");\n    }\n}";
    private List<string> userInputs = new List<string>();
    private string output = "";
    private string evaluationResult = "";

    [Inject]
    private ICSharpExecutorService ExecutorService { get; set; }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "csharp",
                Theme = "vs-dark",
                Value = code,
            };
    }

    private async Task ExecuteCode()
    {
        userInputs.Clear();
        await HandleInputDialog(code);
        string expectedOutput = "Hello, world!";
        output = ExecutorService.ExecuteCSharpCode(code, userInputs);
        if (output.Trim() == expectedOutput)
        {
            evaluationResult = "Code execution successful!";
        }
        else
        {
            evaluationResult = "Code execution failed. Expected output: " + expectedOutput;
        }
    }

    private async Task HandleInputDialog(string code)
    {
        int readLineIndex = code.IndexOf("Console.ReadLine()");
        if (readLineIndex != -1)
        {
            string prompt = $"Enter input for Console.ReadLine() #{userInputs.Count + 1}:";
            var result = await DialogService.OpenAsync<InputDialog>(prompt);
            if (result != null)
            {
                userInputs.Add(result.ToString());
                await HandleInputDialog(code.Substring(readLineIndex + 1));
            }
        }
    }
}
