@page "/profile/{userId?}"
@using Microsoft.EntityFrameworkCore
@inject UserProfileService UserProfileService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject UserManager<ApplicationUser> UserManager
@using Stripe.Checkout
@attribute [Authorize]

<PageTitle>Profil</PageTitle>
@if (Profile != null)
{
    <div class="profile-page">
        <div class="content">
            <div class="content__cover">
                <div class="content__avatar">
                    <RadzenGravatar Email="@Profile.Email" class="h-100 w-100" />
                </div>
            </div>
            <div class="content__actions">
                @if (IsProfileOwner)
                {
                    <a @onclick="AddStatusDialog">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512">
                            <path fill="currentColor" d="M192 256A112 112 0 1 0 80 144a111.94 111.94 0 0 0 112 112zm76.8 32h-8.3a157.53 157.53 0 0 1-68.5 16c-24.6 0-47.6-6-68.5-16h-8.3A115.23 115.23 0 0 0 0 403.2V432a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48v-28.8A115.23 115.23 0 0 0 268.8 288z"></path>
                            <path fill="currentColor" d="M480 256a96 96 0 1 0-96-96 96 96 0 0 0 96 96zm48 32h-3.8c-13.9 4.8-28.6 8-44.2 8s-30.3-3.2-44.2-8H432c-20.4 0-39.2 5.9-55.7 15.4 24.4 26.3 39.7 61.2 39.7 99.8v38.4c0 2.2-.5 4.3-.6 6.4H592a48 48 0 0 0 48-48 111.94 111.94 0 0 0-112-112z"></path>
                        </svg><span>Status</span>
                    </a>
                    <a href="/rooms">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512">
                            <path fill="currentColor" d="M208 352c-41 0-79.1-9.3-111.3-25-21.8 12.7-52.1 25-88.7 25a7.83 7.83 0 0 1-7.3-4.8 8 8 0 0 1 1.5-8.7c.3-.3 22.4-24.3 35.8-54.5-23.9-26.1-38-57.7-38-92C0 103.6 93.1 32 208 32s208 71.6 208 160-93.1 160-208 160z"></path>
                            <path fill="currentColor" d="M576 320c0 34.3-14.1 66-38 92 13.4 30.3 35.5 54.2 35.8 54.5a8 8 0 0 1 1.5 8.7 7.88 7.88 0 0 1-7.3 4.8c-36.6 0-66.9-12.3-88.7-25-32.2 15.8-70.3 25-111.3 25-86.2 0-160.2-40.4-191.7-97.9A299.82 299.82 0 0 0 208 384c132.3 0 240-86.1 240-192a148.61 148.61 0 0 0-1.3-20.1C522.5 195.8 576 253.1 576 320z"></path>
                        </svg><span>Forum</span>
                    </a>
                }
                else
                {
                    <br />
                }
            </div>
            <div class="content__title">
                <h1>@Profile.FullName</h1>
                <span>@prom</span> <br />
                <span>@tier</span> <br />
                <span>@Profile.Id</span>
            </div>

            <div class="content__description">
                <p>@((MarkupString)Profile.Status)</p>
            </div>
            <ul class="content__list">
                <li><span>@Profile.Score</span> Stars</li>
                <li><span>@pos</span> Leaderboard</li>
            </ul>
            @if (IsProfileOwner)
            {
                <div class="content__button">
                    <a class="button" @onclick="onClickRedirect">
                        <div class="button__border"></div>
                        <div class="button__bg"></div>
                        <p class="button__text">Zobraziť Kurzy</p>
                    </a>
                    @if (!IsPremium)
                    {
                        <a class="button" @onclick="onClickRedirectToPayment">
                            <div class="button__border"></div>
                            <div class="button__bg"></div>
                            <p class="button__text">Kúpiť premium</p>
                        </a>
                    }
                </div>
            }
        </div>
    </div>
    <RoomsCreated User="@Profile" />
    <NewsLetter />
}
else
{
    <div class="rz-m-12">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}

@code {
    [Parameter]
    public string userId { get; set; }
    private string prom;
    private string tier;
    private int pos;
    private bool IsProfileOwner = false;
    private bool IsPremium = false;

    
    [SupplyParameterFromQuery(Name = "sessionId")]
    public string? SessionId { get; set; }

    private string _customerName = string.Empty;
    
    private void onClickRedirect()
    {
        NavigationManager.NavigateTo("/Courses",true);
    }

    private void onClickRedirectToPayment()
    {
        NavigationManager.NavigateTo("/payment");
    }
    private ApplicationUser Profile;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        // Get the user ID from the ClaimsPrincipal
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId))
        {
            // Retrieve the ApplicationUser using UserManager
            var applicationUser = await UserManager.FindByIdAsync(userId);

            if (applicationUser != null)
            {
                // Get the roles for the ApplicationUser
                var roles = await UserManager.GetRolesAsync(applicationUser);
                IsPremium = roles.Contains("Premium");
            }
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        Profile = await UserProfileService.GetUserProfileAsync(userId, user);
        if (Profile != null)
        {
            IsProfileOwner = string.IsNullOrEmpty(userId);
            pos = await UserProfileService.GetLeaderboardPositionAsync(Profile.Score);
            prom = await UserProfileService.GetPronounsAsync(Profile.Gender);
            tier = await UserProfileService.GetUserTierAsync(Profile);
        }
        
        if (SessionId is not null)
        {
            var service = new SessionService();
            var session = await service.GetAsync(SessionId);

            // Verify if the payment was successful
            if (session.PaymentStatus == "paid")
            {
                _customerName = session.CustomerDetails.Name;
                ShowBusyDialog();
                if (user.Identity.IsAuthenticated)
                {
                    var currentUser = await UserManager.GetUserAsync(user);

                    if (currentUser != null)
                    {
                        var userRoles = await UserManager.GetRolesAsync(currentUser);

                        if (!userRoles.Contains("Admin"))
                        {
                            var result = await UserManager.AddToRoleAsync(currentUser, "Premium");

                            if (result.Succeeded)
                            {
                                // Optionally, you can log the success or perform other actions here
                                Console.WriteLine("User role updated to Premium.");
                                
                            }
                            else
                            {
                                // Handle errors here
                                Console.WriteLine("Failed to update user role.");
                            }
                        }
                    }
                }
            }
            else
            {
                // Handle the case where the payment was not successful
                NavigationManager.NavigateTo("/PaymentFailed");
            }
        }
    }

    async Task AddStatusDialog()
    {
        var result = await DialogService.OpenAsync("Zmeniť status", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <form @onsubmit="UpdateStatus">
                <RadzenHtmlEditor @bind-Value=@Profile.Status style="height: 300px;" UploadUrl="upload/image" />
                <br />
                <RadzenButton type="submit" Click="() => ds.Close(true)">Zmeniť status</RadzenButton>
            </form>
        </RadzenStack>
    </RadzenStack>);
    }
    async Task BusyDialog()
    {
        await DialogService.OpenAsync("", ds =>
            @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" class="rz-p-12">
                <RadzenImage Path="/img/Gifs/suc.gif" Style="width: 200px;" AlternateText="community" />
                <RadzenText TextStyle="TextStyle.H6">Blahoželám, si premium user</RadzenText>
            </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }
    
    async Task ShowBusyDialog()
    {
        InvokeAsync(async () =>
        {
            // Simulate background task
            await Task.Delay(10000);

            // Close the dialog
            DialogService.Close();
        });
            await BusyDialog();
    }

    
    private async Task UpdateStatus()
    {
        try
        {
            await UserProfileService.UpdateStatusAsync(Profile, Profile.Status);
            NavigationManager.Refresh(true);
        }
        catch (Exception ex)
        {
            // Handle exception, possibly show an error message to the user
        }
    }
}
