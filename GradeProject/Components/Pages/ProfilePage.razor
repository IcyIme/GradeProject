@page "/profile/{userId?}"

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject INavigationService NavigationService

@attribute [Authorize]

<PageTitle>Profil</PageTitle>
@if (Profile != null)
{
    <div class="profile-page">
        <div class="content">
            <div class="content__cover">
                <div class="content__avatar">
                    <RadzenGravatar Email="@Profile.Email" class="h-100 w-100" />
                </div>
                <div class="content__bull">
                    <span></span><span></span><span></span><span></span><span></span>
                </div>
            </div>
            <div class="content__actions">
                <a href="#">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512">
                        <path fill="currentColor" d="M192 256A112 112 0 1 0 80 144a111.94 111.94 0 0 0 112 112zm76.8 32h-8.3a157.53 157.53 0 0 1-68.5 16c-24.6 0-47.6-6-68.5-16h-8.3A115.23 115.23 0 0 0 0 403.2V432a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48v-28.8A115.23 115.23 0 0 0 268.8 288z"></path>
                        <path fill="currentColor" d="M480 256a96 96 0 1 0-96-96 96 96 0 0 0 96 96zm48 32h-3.8c-13.9 4.8-28.6 8-44.2 8s-30.3-3.2-44.2-8H432c-20.4 0-39.2 5.9-55.7 15.4 24.4 26.3 39.7 61.2 39.7 99.8v38.4c0 2.2-.5 4.3-.6 6.4H592a48 48 0 0 0 48-48 111.94 111.94 0 0 0-112-112z"></path>
                    </svg><span>Connect</span>
                </a>
                <a href="#">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512">
                        <path fill="currentColor" d="M208 352c-41 0-79.1-9.3-111.3-25-21.8 12.7-52.1 25-88.7 25a7.83 7.83 0 0 1-7.3-4.8 8 8 0 0 1 1.5-8.7c.3-.3 22.4-24.3 35.8-54.5-23.9-26.1-38-57.7-38-92C0 103.6 93.1 32 208 32s208 71.6 208 160-93.1 160-208 160z"></path>
                        <path fill="currentColor" d="M576 320c0 34.3-14.1 66-38 92 13.4 30.3 35.5 54.2 35.8 54.5a8 8 0 0 1 1.5 8.7 7.88 7.88 0 0 1-7.3 4.8c-36.6 0-66.9-12.3-88.7-25-32.2 15.8-70.3 25-111.3 25-86.2 0-160.2-40.4-191.7-97.9A299.82 299.82 0 0 0 208 384c132.3 0 240-86.1 240-192a148.61 148.61 0 0 0-1.3-20.1C522.5 195.8 576 253.1 576 320z"></path>
                    </svg><span>Message</span>
                </a>
            </div>
            <div class="content__title">
                <h1>@Profile.FullName</h1><span>@prom</span>
            </div>
            <div class="content__description">
                <p>Web Producer - Web Specialist</p>
                <p>@Profile.Id</p>
            </div>
            <ul class="content__list">
                <li><span>@Profile.Score</span>Stars</li>
                <li><span>@pos</span>Leaderboard</li>
            </ul>
            <div class="content__button">
                <a class="button" onclick="@onClickRedirect">
                    <div class="button__border"></div>
                    <div class="button__bg"></div>
                    <p class="button__text">@ButtonLessonText()</p>
                </a>
            </div>
        </div>
    </div>
    
}
else
{
    <div class="rz-m-12">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}

@code {
    [Parameter]
    public string userId { get; set; }

    private string prom;
    private int pos;
    
    private string ButtonLessonText()
    {
        if (GetLessons == null)
        {
            return "Za훾nite sa u훾i큐!";
        }
        else
        {
            return $"Pokra훾ujte v lekcii {GetLessons[GetLessons.Length - 1]}!";
        }
    }

    private void onClickRedirect()
    {
        if (GetLessons == null)
        {
            NavigationManager.NavigateTo("/learn");
        }
        else
        {
            NavigationService.Navigator(GetLessons[GetLessons.Length - 1]);
        }
    }

    public class ProfileModel
    {
        public string Id { get; set; }
        public string FullName { get; set; }
        public DateTime DateOfBirth { get; set; }
        public string Gender { get; set; }
        public int Score { get; set; }
        public string Email { get; set; }
    }

    private ProfileModel Profile;
    private string[] GetLessons;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        ApplicationUser applicationUser = null;

        if (!string.IsNullOrEmpty(userId))
        {
            applicationUser = await UserManager.FindByIdAsync(userId);
        }
        else
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user?.Identity?.Name != null)
            {
                applicationUser = await UserManager.FindByNameAsync(user.Identity.Name);
            }
        }

        if (applicationUser != null)
        {
            Profile = new ProfileModel
            {
                Id = applicationUser.Id,
                FullName = applicationUser.FullName,
                DateOfBirth = applicationUser.DateOfBirth,
                Gender = applicationUser.Gender,
                Score = applicationUser.Score,
                Email = applicationUser.Email,
            };
            GetLessons = applicationUser.CompletedLesson;
            pos = GetLeaderboardPositionAsync(Profile.Score);
            prom = GetPonnuns();
        }
    }

    private int GetLeaderboardPositionAsync(int score)
    {
        // Mock logic to get the leaderboard position
        var allUsers =  UserManager.Users.ToList();
        var rankedUsers = allUsers.OrderByDescending(u => u.Score).ToList();
        var position = rankedUsers.FindIndex(u => u.Score == score) + 1;
        return position;
    }
    
    private string GetPonnuns()
    {
        return Profile?.Gender switch
        {
            "Male" => "On/Jeho",
            "Female" => "Ona/Jej",
            "PreferNotToSay" => "Oni/Ich",
            _ => "none"
        };
    }
}
