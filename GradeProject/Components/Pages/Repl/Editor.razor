@page "/repl/playground/{id:int?}"
@attribute [Authorize]
@inject DialogService DialogService

<style>
    #myEditor {
        height: 70vh; /* Set the height to 70% of the viewport height */
        width: 100%; /* Set the width to 100% */
    }
</style>
<PageTitle>GRADE REPL 1b0</PageTitle>

<div class="replgrid">
    <div class="h-100 w-100">
        <StandaloneCodeEditor @ref="myEditor" Id="myEditor" ConstructionOptions="EditorConstructionOptions" OnDidChangeModelContent="HandleContentChange" />
    </div>
    <div class="console-bg">
        <div class="console-scroll">
            @if (isExecuting)
            {
                <pre>Waiting for execution...</pre>
            }
            @if (!string.IsNullOrEmpty(output))
            { 
                <br>
                <pre>@output</pre>
                <p>@evaluationResult</p>
            }
        </div>
    </div>
</div>

<br/>
<RadzenButton Text="Compile" Click="ExecuteCode"></RadzenButton>

@code {
    [Parameter] 
    public int? id { get; set; }
    private StandaloneCodeEditor myEditor;
    private string initialCode = "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(\"Hello, world!\");\n    }\n}";
    private string code;
    private List<string> userInputs = new List<string>();
    private string output = "";
    private string evaluationResult = "";
    
    Random random = new Random();
    
    private bool isExecuting = false;

    [Inject]
    private ICSharpExecutorService ExecutorService { get; set; }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Theme = "vs-light",
            Value = code,
        };
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        // Update code based on the id parameter
        switch (id)
        {
            case 1:
                code = initialCode;
                break;
            default:
                code = "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(\"Hello, wld!\");\n    }\n}";
                break;
        }

        // If the editor is already initialized, update its value
        if (myEditor != null)
        {
            myEditor.SetValue(code);
        }
        
    }

    private async Task HandleContentChange()
    {
        code = await myEditor.GetValue();
    }

    private async Task ExecuteCode()
    {
        ShowBusyDialog();
        userInputs.Clear();
        await Task.Delay(random.Next(1000, 4000));
        
        int readLineCount = code.Split(new[] { "Console.ReadLine()" }, StringSplitOptions.None).Length - 1;

        for (int i = 0; i < readLineCount; i++)
        {
            var result = await DialogService.OpenAsync<InputDialog>($"Enter input for Console.ReadLine() #{i + 1}",
                new Dictionary<string, object> { { "Prompt", $"Enter input for Console.ReadLine() #{i + 1}:" } });
            userInputs.Add(result as string);
        }

        string expectedOutput = "Hello, world!";
        output = await ExecutorService.ExecuteCSharpCodeAsync(code, userInputs);

        if (output.Trim() == expectedOutput)
        {
            evaluationResult = "Code execution successful!";
        }
        else
        {
            evaluationResult = "Code execution failed. Expected output: " + expectedOutput;
        }

        DialogService.Close();
    }

    async Task ShowBusyDialog()
    {
        InvokeAsync(async () =>
        {
            if (!string.IsNullOrEmpty(output))
                DialogService.Close();
        });

        await BusyDialog();
    }

    async Task BusyDialog()
    {
        await DialogService.OpenAsync("", ds =>
            @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12">
                <RadzenImage Path="/img/Gifs/wired-lineal-186-puzzle.gif" Style="width: 200px;" AlternateText="community" /> 
                <RadzenText TextStyle="TextStyle.H6">Executing code, please wait...</RadzenText>
            </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }

    async Task BusyDialog(string message)
    {
        await DialogService.OpenAsync("", ds =>
        {
            RenderFragment content = b =>
            {
                b.OpenElement(0, "RadzenRow");

                b.OpenElement(1, "RadzenColumn");
                b.AddAttribute(2, "Size", "12");

                b.AddContent(3, message);

                b.CloseElement();
                b.CloseElement();
            };
            return content;
        }, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }
}
