@page "/q"
@inherits GradeProject.QuizCardBase

@inject AuthenticationStateProvider authenticationStateProvider
@inject UserManager<ApplicationUser> userManager

<PageTitle>Q</PageTitle>

@if (Questions.Count != 0)
{
    <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Class="h-100">
        <div class="container">
            <div class="quiz" style="max-width: 500px; margin: 0 auto;">
                @if (questionIndex < Questions.Count())
                {
                    <div class="app-title">
                        Poďme precvičovať!
                    </div>
                    <div class="quiz-header">
                        @Questions[questionIndex].QuestionTitle
                    </div>
                    <div class="quiz-body">
                        @foreach (var option in Questions[questionIndex].Options)
                        {
                            <OptionCard Option="@option" OnOptionSelected="OptionSelected"></OptionCard>
                        }
                    </div>
                }
                else
                {
                    <div class="app-title">
                        @if (score > (Questions.Count() / 2))
                        {
                            <img src="/img/Gifs/stars.gif" />
                            <text>Blahoželám</text>
                            <p>@update()</p>
                            <div class="quiz-header">
                                <b>Získal si @(score * 2) ✨ (stars)!</b>
                            </div>
                        }
                        else
                        {
                            <img src="/img/Gifs/error.gif" />
                            <br />
                            <text>Lepšie šťastie nabudúce!</text>
                        }
                    </div>
                    <div class="quiz-footer">
                        <button class="next-btn" @onclick="@RestartQuiz">Znovu</button>
                    </div>
                }
            </div>
        </div>
    </RadzenStack>
}
else
{
<div class="rz-m-12">
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
</div>
}

@code {
    private bool updateSuccessful = false;
    private bool updateError = false;

    private string update()
    {
        UpdateScoreAsync(score);
        return $"";
    }


    private async Task UpdateScoreAsync(int score)
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var currentUser = await userManager.GetUserAsync(user);
                if (currentUser != null)
                {
                    // Update the score
                    currentUser.Score += 2 * score; // Example: Increase score by 2

                    // Save changes to the user
                    var result = await userManager.UpdateAsync(currentUser);
                }
                else
                {
                    updateSuccessful = false;
                    updateError = true;
                }
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine($"An error occurred: {ex.Message}");
            updateSuccessful = false;
            updateError = true;
        }
    }
}
