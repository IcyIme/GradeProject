@page "/q/{Id}"

@using GradeProject.Data.Models

@layout QuizLayout

@inject AuthenticationStateProvider authenticationStateProvider
@inject UserManager<ApplicationUser> userManager
@inject IQuizService QuizService;
@inject NavigationManager NavigationManager
@inject IQuizLoaderService QuizLoaderService

<PageTitle>Q</PageTitle>
@if (_quizAvailable)
{
    @if (Questions.Count != 0)
    {
        <RadzenColumn>
            <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Class="h-100">
                <div class="container">
                    <div class="quiz" style="max-width: 500px; margin: 0 auto;">
                        @if (questionIndex < Questions.Count())
                        {
                            <div class="app-title">
                                Poďme precvičovať!
                            </div>
                            <div class="quiz-header">
                                @Questions[questionIndex].QuestionTitle
                            </div>
                            <div class="quiz-body">
                                @foreach (var option in Questions[questionIndex].Options)
                                {
                                    <OptionCard Option="@option" OnOptionSelected="OptionSelected"></OptionCard>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="app-title">
                                @if (score > (Questions.Count() / 2))
                                {
                                    <img src="/img/Gifs/stars.gif" />
                                    <text>Blahoželám</text>
                                    <div class="quiz-header">
                                        <b>Získal si @(score * 2) ✨ (stars)!</b>
                                    </div>
                                }
                                else
                                {
                                    <img src="/img/Gifs/error.gif" />
                                    <br />
                                    <text>Lepšie šťastie nabudúce!</text>
                                }
                            </div>
                            @if ((score > (Questions.Count() / 2)))
                            {
                                <div class="quiz-footer">
                                    <button class="next-btn" @onclick="@goBack">Pokracovat na ucenie</button>
                                </div>
                            }
                            else
                            {
                                <div class="quiz-footer">
                                    <button class="next-btn" @onclick="@RestartQuiz">Znovu</button>
                                </div>
                            }
                        }
                    </div>
                </div>
            </RadzenStack>
            <br/>
            <RadzenProgressBar Value="CalculateProgress()" ShowValue="true" />
        </RadzenColumn>
    }
    else
    {
        <div class="rz-m-12">
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    }
}
else
{
    <h1>qq</h1>
}

@code {

    [Parameter] public string Id { get; set; }

    private bool _updateSuccessful = false;
    private bool _updateError = false;
    private bool _quizAvailable = false;
    private bool _quizIsTaken = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Questions = await QuizLoaderService.LoadQuestionsAsync(Id);
        try
        {
            _quizAvailable = await QuizService.IsQuizAvailable("intro");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private double CalculateProgress()
    {
        if (Questions.Count == 0)
        {
            return 100; // If there are no questions, show the progress bar as complete
        }
        else
        {
            return (double)(questionIndex) / Questions.Count * 100; // Calculate progress percentage
        }
    }

    private async Task UpdateScoreAsync(int score)
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var currentUser = await userManager.GetUserAsync(user);
                if (currentUser != null)
                {
                    // Update the score
                    currentUser.Score += 2 * score; // Example: Increase score by 2

                    // Save changes to the user
                    var result = await userManager.UpdateAsync(currentUser);
                    QuizService.AddQuiz(Id);
                    if (result.Succeeded)
                    {
                        // Update was successful
                        _updateSuccessful = true;
                    }
                    else
                    {
                        // Update failed
                        _updateSuccessful = false;
                        _updateError = true;
                    }
                }
                else
                {
                    _updateSuccessful = false;
                    _updateError = true;
                }
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine($"An error occurred: {ex.Message}");
            _updateSuccessful = false;
            _updateError = true;
        }
    }


    public List<Question> Questions { get; set; } = new List<Question>();
    protected int questionIndex = 0;
    protected int score = 0;


    protected void OptionSelected(string option)
    {
        if (option == Questions[questionIndex].Answer)
        {
            score++;
        }
        questionIndex++;
    }

    protected void RestartQuiz()
    {
        score = 0;
        questionIndex = 0;
    }

    private void goBack()
    {
        switch (Id)
        {
            case "intro":
                UpdateScoreAsync(score);
                StateHasChanged();
                NavigationManager.NavigateTo("/learn/intro");
                break;
        }
    }

}

