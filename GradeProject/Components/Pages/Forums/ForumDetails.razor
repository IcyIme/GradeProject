@page "/room/{roomId:int}"
@using System.Security.Claims
@inject IForumService ForumService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<div class="container-sm">

    @if (room != null)
    {
        <div class="bgtext">
            <h4 style="text-align:center;">@room.Title</h4>
            <p class="wrap"> @((MarkupString)room.Detail)</p>
            <p style="text-align:center;">Owner: @userName</p>
        </div>

        <h5>Comments:</h5>
        <div class="comment-list">
            @foreach (var comment in room.Comments.OrderByDescending(r => r.DateOfCreation))
            {
                <div class="bubble wrap @(comment.UserId == userId ? "right" : "left")">
                    <strong>@comment.UserName:</strong> <br/>
                    <p>@comment.Content</p>
                    @if (comment.UserId == userId)
                    {
                        <br/>
                        <RadzenButton Click="() => DeleteComment(comment.Id)"> delete</RadzenButton>
                    }
                </div>
            }
        </div>

        <h5>Add a Comment:</h5>
        <form @onsubmit="AddComment">
            <textarea @bind="newCommentContent"></textarea>
            <button type="submit">Add Comment</button>
        </form>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="text-danger">@errorMessage</p>
        }


        @if (IsOwner)
        {
            <button @onclick="DeleteRoom">Delete Room</button>
        }
    }
</div>


@code {
    [Parameter]
    public int RoomId { get; set; }

    private ForumRoom room;
    private bool IsOwner;
    private string userId;
    private string newCommentContent;
    private string userName;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User?.FindFirstValue(ClaimTypes.NameIdentifier);

        room = await ForumService.GetRoomAsync(RoomId);
        userName = await ForumService.GetUserNameAsync(room.OwnerId);
        if (room != null && room.OwnerId == userId)
        {
            IsOwner = true;
        }
    }

    private async Task AddComment()
    {

        if (string.IsNullOrWhiteSpace(newCommentContent))
        {
            errorMessage = "Comment cannot be blank.";
            return;
        }

        var comment = new ForumComment
            {
                Content = newCommentContent,
                RoomId = RoomId,
                UserId = userId,
                DateOfCreation = DateTime.UtcNow,
                UserName = await ForumService.GetUserNameAsync(userId)
            };

        await ForumService.AddCommentAsync(comment);
        room.Comments.Add(comment);
        newCommentContent = "";
    }

    private async Task DeleteComment(int commentId)
    {
        var comment = room.Comments.FirstOrDefault(c => c.Id == commentId);
        if (comment != null && comment.UserId == userId)
        {
            await ForumService.DeleteCommentAsync(commentId);
            room.Comments = room.Comments.Where(c => c.Id != commentId).ToList();
        }
    }

    private async Task DeleteRoom()
    {
        if (await ForumService.CanManageRoomAsync(RoomId, room.OwnerId))
        {
            await ForumService.DeleteRoomAsync(RoomId);
            NavigationManager.NavigateTo("/rooms");
        }
        else
        {
            // Handle error or unauthorized deletion
        }
    }
}
