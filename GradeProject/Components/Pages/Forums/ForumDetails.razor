@page "/room/{roomId:int}"
@using System.Security.Claims
@inject IForumService ForumService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>Room Details</h3>

@if (room != null)
{
    <h4>@room.Title</h4>
    <p><strong>Detail:</strong> @room.Detail</p>
    <p>Owner: @userName</p>

    <h5>Comments:</h5>
    <ul>
        @foreach (var comment in room.Comments)
        {
            <li>
                <strong>@comment.UserName:</strong> @comment.Content
                @if (comment.UserId == userId)
                {
                    <button @onclick="() => DeleteComment(comment.Id)">Delete</button>
                }
            </li>
        }
    </ul>

    <h5>Add a Comment:</h5>
    <form @onsubmit="AddComment">
        <textarea @bind="newCommentContent"></textarea>
        <button type="submit">Add Comment</button>
    </form>

    @if (IsOwner)
    {
        <button @onclick="DeleteRoom">Delete Room</button>
    }
}

@code {
    [Parameter]
    public int RoomId { get; set; }

    private ForumRoom room;
    private bool IsOwner;
    private string userId;
    private string newCommentContent;
    private string userName;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User?.FindFirstValue(ClaimTypes.NameIdentifier);

        room = await ForumService.GetRoomAsync(RoomId);
        userName = await ForumService.GetUserNameAsync(room.OwnerId);
        if (room != null && room.OwnerId == userId)
        {
            IsOwner = true;
        }
    }

    private async Task AddComment()
    {
        var comment = new ForumComment
            {
                Content = newCommentContent,
                RoomId = RoomId,
                UserId = userId,
                UserName = await ForumService.GetUserNameAsync(userId)
            };

        await ForumService.AddCommentAsync(comment);
        room.Comments.Add(comment);
        newCommentContent = "";
    }

    private async Task DeleteComment(int commentId)
    {
        var comment = room.Comments.FirstOrDefault(c => c.Id == commentId);
        if (comment != null && comment.UserId == userId)
        {
            await ForumService.DeleteCommentAsync(commentId);
            room.Comments = room.Comments.Where(c => c.Id != commentId).ToList();
        }
    }

    private async Task DeleteRoom()
    {
        if (await ForumService.CanManageRoomAsync(RoomId, room.OwnerId))
        {
            await ForumService.DeleteRoomAsync(RoomId);
            NavigationManager.NavigateTo("/rooms");
        }
        else
        {
            // Handle error or unauthorized deletion
        }
    }
}
