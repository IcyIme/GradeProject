@page "/home"

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject INavigationService NavigationService

@attribute [Authorize]

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (Profile != null)
        {
            <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Class="h-100">
                <div class="bgtext">
                    <RadzenRow>
                        <RadzenColumn Style="text-align: center; border-radius: 100px; padding: 20px">
                            <div class="mx-auto pfp">
                                <RadzenGravatar Email="@Profile.Email" class="h-100 w-100" />
                            </div>
                            <h1 class="text-center"><b>Ahoj, @Profile.FullName</b></h1>
                            <h4 class="text-center">✨<b>@Profile.Score</b> Stars</h4>
                            <br/>
                            <RadzenButton Click=@(onClickRedirect) Style="width: 260px; border-radius: 10px; text-align: center">@ButtonLessonText()</RadzenButton>
                        </RadzenColumn>
                    </RadzenRow>
                </div>
            </RadzenStack>
            <br />
        }
        else
        {
            <div class="rz-m-12">
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this page.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string ButtonLessonText()
    {
        if (GetLessons == null)
        {
            return "Začnite sa učiť!";
        }
        else
        {
            return $"Pokračujte v lekcii {GetLessons[GetLessons.Length - 1]}!";
        }
    }

    private void onClickRedirect()
    {
        if (GetLessons == null)
        {
            NavigationManager.NavigateTo("/learn");
        }
        else
        {
	        NavigationService.Navigator(GetLessons[GetLessons.Length - 1]);
        }
    }

    public class ProfileModel
    {
        public string FullName { get; set; }
        public DateTime DateOfBirth { get; set; }
        public string Gender { get; set; }
        public int Score { get; set; }
        public string Email { get; set; }
    }

    private ProfileModel Profile;
    private string[] GetLessons;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;

        if (user?.Identity?.Name != null)
        {
            var applicationUser = UserManager.FindByNameAsync(user.Identity.Name).Result;

            if (applicationUser != null)
            {
                Profile = new ProfileModel
                    {
                        FullName = applicationUser.FullName,
                        DateOfBirth = applicationUser.DateOfBirth,
                        Gender = applicationUser.Gender,
                        Score = applicationUser.Score,
                        Email = applicationUser.Email // Assign user's email to Profile.Email
                    };
                GetLessons = applicationUser.CompletedLesson;
            }
        }
    }
}
