@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using GradeProject.Data
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (Profile != null)
        {
            <RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Class="h-100">
                <RadzenRow>
                    <RadzenColumn>
                        <div class="mx-auto pfp">
                            <RadzenGravatar Email="@Profile.Email" class="h-100 w-100" />
                        </div>
                        <h1 class="text-center"><b>Hello, @Profile.FullName</b></h1>
                        <h4 class="text-center">âœ¨<b>@Profile.Score</b> Stars</h4>
                        <br/>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenButton Style="width: 260px; border-radius: 10px">@ButtonLessonText()</RadzenButton>
                </RadzenStack>
            <br />
            <h3 class="text-center">Leaderboard</h3>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Rank</th>
                        <th>Name</th>
                        <th>Stars</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Leaderboard)
                    {
                        <tr>
                            <td><b>@(Leaderboard.IndexOf(user) + 1)</b></td>
                            <td>@user.FullName</td>
                            <td>@user.Score</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="rz-m-12">
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to view this page.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string ButtonLessonText()
    {
        if (GetLessons == null)
        {
            return "Start Learning";
        }
        else
        {
            return $"continue on lesson {GetLessons[GetLessons.Length - 1]}";
        }
    }

    public class ProfileModel
    {
        public string FullName { get; set; }
        public DateTime DateOfBirth { get; set; }
        public string Gender { get; set; }
        public int Score { get; set; }
        public string Email { get; set; }
    }

    private ProfileModel Profile;
    private string[] GetLessons;
    private List<ApplicationUser> Leaderboard;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;

        if (user?.Identity?.Name != null)
        {
            var applicationUser = UserManager.FindByNameAsync(user.Identity.Name).Result;

            if (applicationUser != null)
            {
                Profile = new ProfileModel
                    {
                        FullName = applicationUser.FullName,
                        DateOfBirth = applicationUser.DateOfBirth,
                        Gender = applicationUser.Gender,
                        Score = applicationUser.Score,
                        Email = applicationUser.Email // Assign user's email to Profile.Email
                    };
                GetLessons = applicationUser.CompletedLesson;
            }
        }

        // Get leaderboard data
        Leaderboard = await GetLeaderboard();
    }

    // Method to retrieve leaderboard data
    private async Task<List<ApplicationUser>> GetLeaderboard()
    {
        // Retrieve the top users based on their scores
        var topUsers = UserManager.Users.OrderByDescending(u => u.Score).Take(10).ToList();
        return topUsers;
    }
}
